"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
}
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("./enums");
var request = __importStar(require("request"));
/**
 * Request an E621 URL endpoint and recursively get all pages of information up to the limit set
 *
 * Note: Page 0 and 1 are the same results so we start at 1, not 0 (Sorry)
 *
 * Note: For some endpoints the maximum is 750 pages (which should be fine)
 * @param {String} urlWithoutPageNum
 * @param {Number} start
 * @param {Number} limit
 * @param {Array<Array<e621PostData>>} pageArray
 * @param {string} userAgent
 * @returns {Array<Array<e621PostData>>} Returns a 2D array
 */
function paginateE621Endpoint(urlWithoutPageNum, start, limit, pageArray, userAgent) {
    return requestUrl(urlWithoutPageNum + "&page=" + start, userAgent)
        .then(function (response) {
        if (response.length !== 0 && limit !== start) {
            pageArray.push(response);
            return paginateE621Endpoint(urlWithoutPageNum, start + 1, limit, pageArray, userAgent);
        }
        else {
            // still push the last response!
            if (response.length !== 0) {
                pageArray.push(response);
            }
            return pageArray;
        }
    })
        .catch(function (err) {
        throw Error(err);
    });
}
exports.paginateE621Endpoint = paginateE621Endpoint;
/**
 * Get a post's data by its ID using the e621 API
 * @param {number} postID
 * @param {string} userAgent
 * @returns {Promise}
 */
function getPostByID(postID, userAgent) {
    return requestUrl("https://e621.net/post/show.json?id=" + postID, userAgent)
        .then(function (response) {
        return response;
    })
        .catch(function (err) {
        throw Error(err);
    });
}
exports.getPostByID = getPostByID;
/**
 * Get a post's data by its MD5 using the e621 API
 * @param {number} md5String
 * @param {string} userAgent
 * @returns {Promise}
 */
function getPostByMD5(md5String, userAgent) {
    return requestUrl("https://e621.net/post/show.json?md5=" + md5String, userAgent)
        .then(function (response) {
        return response;
    })
        .catch(function (err) {
        throw Error(err);
    });
}
exports.getPostByMD5 = getPostByMD5;
/**
 * Request an e621 URL using constant headers (user-agent, etc.)
 * @param {URL} url
 * @returns {Promise<any>}
 */
function requestUrl(url, userAgent, userName, apiKey) {
    var options = {
        uri: url,
        headers: {
            'User-Agent': userAgent
        },
        json: true
    };
    if (userName && apiKey)
        url = url + ("&name=" + userName + "&password_hash=" + apiKey);
    console.log(url);
    return new Promise(function (resolve, reject) {
        request.get(options, function (err, response, body) {
            if (err) {
                return reject(err);
            }
            if (response.statusCode !== enums_1.e621ResponseCodes.OK) {
                return reject('GET did not return OK');
            }
            // typescript wouldn't leave me alone on this
            if (response.statusCode == enums_1.e621ResponseCodes.FORBIDDEN.valueOf()) {
                return reject('Incorrect password given');
            }
            return resolve(body);
        });
    });
}
exports.requestUrl = requestUrl;
function postUrl(url, userAgent, postObject) {
    var options;
    if (postObject) {
        options = {
            uri: url,
            headers: {
                'User-Agent': userAgent
            },
            json: true,
            body: postObject
        };
    }
    else {
        options = {
            uri: url,
            headers: {
                'User-Agent': userAgent
            },
            json: true,
        };
    }
    return new Promise(function (resolve, reject) {
        request.post(options, function (err, response, body) {
            if (err) {
                return reject(err);
            }
            return resolve(body);
        });
    });
}
exports.postUrl = postUrl;
/**
 * Generate the e621 URL for getting a user's API key
 * @param {String} username
 * @param {String} password
 * @returns {String}
 */
function generateAPIKeyURL(username, password) {
    return "https://e621.net/user/login.json?name=\"" + username + "\"&password=\"" + password + "\"";
}
exports.generateAPIKeyURL = generateAPIKeyURL;
