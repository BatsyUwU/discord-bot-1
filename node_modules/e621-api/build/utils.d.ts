import { e621PostData } from './interfaces';
/**
 * Request an E621 URL endpoint and recursively get all pages of information up to the limit set
 *
 * Note: Page 0 and 1 are the same results so we start at 1, not 0 (Sorry)
 *
 * Note: For some endpoints the maximum is 750 pages (which should be fine)
 * @param {String} urlWithoutPageNum
 * @param {Number} start
 * @param {Number} limit
 * @param {Array<Array<e621PostData>>} pageArray
 * @param {string} userAgent
 * @returns {Array<Array<e621PostData>>} Returns a 2D array
 */
export declare function paginateE621Endpoint(urlWithoutPageNum: string, start: number, limit: number, pageArray: Array<Array<e621PostData>>, userAgent: string): Promise<Array<Array<e621PostData>>>;
/**
 * Get a post's data by its ID using the e621 API
 * @param {number} postID
 * @param {string} userAgent
 * @returns {Promise}
 */
export declare function getPostByID(postID: string, userAgent: string): Promise<e621PostData[]>;
/**
 * Get a post's data by its MD5 using the e621 API
 * @param {number} md5String
 * @param {string} userAgent
 * @returns {Promise}
 */
export declare function getPostByMD5(md5String: string, userAgent: string): Promise<e621PostData[]>;
/**
 * Request an e621 URL using constant headers (user-agent, etc.)
 * @param {URL} url
 * @returns {Promise<any>}
 */
export declare function requestUrl(url: string, userAgent: string, userName?: string, apiKey?: string): Promise<any>;
export declare function postUrl(url: string, userAgent: string, postObject?: object): Promise<Object>;
/**
 * Generate the e621 URL for getting a user's API key
 * @param {String} username
 * @param {String} password
 * @returns {String}
 */
export declare function generateAPIKeyURL(username: string, password: string): string;
