import { RequestServices } from '../RequestService';
import { e621POSTResponse, e621DmailMessage } from '../interfaces';
export default class Dmail {
    private pageLimit;
    private requestServices;
    constructor(pageLimit: number, requestServices: RequestServices);
    /** Get your Dmail inbox, will return an empty array if the given `page` number is empty
     * @param {number} [page] Page number to return
     * @returns Array of dmail data
     * @memberof Dmail
     */
    getInbox(page?: number): Promise<e621DmailMessage[]>;
    /** Get your Dmail outbox (sent messages) Will return an empty array if page number is empty
     * @param {number} [page] Page number to return
     * @returns Array of dmail data
     * @memberof Dmail
     */
    getOutbox(page?: number): Promise<e621DmailMessage[]>;
    /** Get ALL dmail messages, will return an empty array if page number is empty
     * @param {number} [page] Page number to return
     * @returns Array of dmail data
     * @memberof Dmail
     */
    getAllMail(page?: number): Promise<e621DmailMessage[]>;
    /** Search your inbox for a message with a given `query` (exact match)
     *
     * **NOTE**: you do NOT need to include the 'Re:' in your `query` string
     * @param {string} query Exact message subject match
     * @param {number} [page] Page number to return
     * @returns Array of dmail data that match your query
     * @memberof Dmail
     */
    searchInbox(query: string, page?: number): Promise<e621DmailMessage[]>;
    /** Search your outbox for a message with a given `query` (exact match)
     *
     * **NOTE**: you do NOT need to include the 'Re:' in your `query` string
     * @param {string} query Exact message subject match
     * @param {number} [page] Page number to return
     * @returns Array of dmail data that match your query
     * @memberof Dmail
     */
    searchOutbox(query: string, page?: number): Promise<e621DmailMessage[]>;
    /** Search ALL of your mail for a message with a given `query` (exact match)
     *
     * **NOTE**: you do NOT need to include the 'Re:' in your `query` string
     * @param {string} query Exact message subject match
     * @param {number} [page] Page number to return
     * @returns Array of dmail data that match your query
     * @memberof Dmail
     */
    searchAllMail(query: string, page?: number): Promise<e621DmailMessage[]>;
    /**
     * @param {string} to Who to send the message to (Their user name)
     * @param {string} title Title of the Dmail to send
     * @param {string} body Body of the Dmail to send
     * @returns HTML redirect message on success
     * @memberof Dmail
     */
    create(to: string, title: string, body: string): Promise<any>;
    /** Respond to a message with the given `parentID`, automatically
     * adding the 'Re:' title pretext.
     *
     * **NOTE** this will NOT automatically quote the previous message. You will need to do this yourself.
     * @param {string} to Who to send the message to (Their user name)
     * @param {string} title Title of the Dmail to send
     * @param {string} body Body of the Dmail to send
     * @param {number} parentID ID of the parent message to reply ('Re:') to
     * @returns HTML redirect message on success
     * @memberof Dmail
     */
    responsdToParent(to: string, title: string, body: string, parentID: number): Promise<any>;
    /** Get a dmail by its `dmailID`
     * @param {number} dmailID ID of the message to retrieve
     * @returns A single dmail's data
     * @memberof Dmail
     */
    getDmailByID(dmailID: number): Promise<e621DmailMessage>;
    /** Mark all Dmails in your inbox as read
     * @returns e621 success boolean
     * @memberof Dmail
     */
    markAllAsRead(): Promise<e621POSTResponse>;
    /** Get a list of ALL of your hidden dmails
     * @param {number} [page] Page number to return
     * @returns Array of dmail data
     * @memberof Dmail
     */
    getHidden(page?: number): Promise<e621DmailMessage[]>;
    /** Hide a dmail by its `dmailID`
     * @param {number} dmailID ID of the message to hide
     * @returns e621 success boolean
     * @memberof Dmail
     */
    hideDmail(dmailID: number): Promise<any>;
    /** Unhide a dmail by its `dmailID`
     * @param {number} dmailID ID of the message to unhide
     * @returns e621 success boolean
     * @memberof Dmail
     */
    unhideDmail(dmailID: number): Promise<any>;
    /** Hide all dmails in the inbox
     * @returns e621 success boolean
     * @memberof Dmail
     */
    hideAll(): Promise<e621POSTResponse>;
    /** Unhide all dmails in the inbox
     * @returns e621 success boolean
     * @memberof Dmail
     */
    unhideAll(): Promise<e621POSTResponse>;
}
