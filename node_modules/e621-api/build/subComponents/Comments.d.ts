import { RequestServices } from '../RequestService';
import { e621CommentJSON, e621POSTResponse } from '../interfaces';
export default class Comments {
    private pageLimit;
    private requestServices;
    constructor(pageLimit: number, requestServices: RequestServices);
    /** Get a single comment's data by ID
     * @param {(number | string)} commentID ID of the comment to retrieve
     * @returns Promise<e621CommentJSON>
     * @memberof Comments
     */
    show(commentID: number | string): Promise<e621CommentJSON>;
    /** List a set of comments by a post's ID
     * @param {(number | string)} postID The ID number of the post to retrieve comments for
     * @param {number} [page] Page number to return
     * @param {string} [commentStatus] Returns hidden comments when set to `hidden`, visible comments when set to `active`, or both when set to `any`. Note that whether or not you can see other user's hidden comments is affected by your permission levels
     * @returns Promise<e621CommentJSON[]>
     * @memberof Comments
     */
    list(postID: number | string, page?: number, commentStatus?: string): Promise<e621CommentJSON[]>;
    /** Search for comments matching the given `query` text
     * @param {string} query String query which contains the given text for the comment body
     * @param {boolean} [fuzzy] If set to true, fuzzy logic for the query will be used, otherwise it's exact matched
     * @param {boolean} [page] Page number to return
     * @param {string} [order] Sorts the results. Can be one of the following: `date`, `date_asc`, `score`, `score_asc`
     * @returns Promise<e621CommentJSON[]>
     * @memberof Comments
     */
    searchByCommentText(query: string, fuzzy?: boolean, page?: number, order?: string): Promise<e621CommentJSON[]>;
    /** Search for comments by a single user's ID
     * @param {(number | string)} userID ID of the user to search comments for
     * @param {number} [page] Page number to return
     * @param {string} [order] Sorts the results. Can be one of the following: `date`, `date_asc`, `score`, `score_asc`
     * @returns Promise<e621CommentJSON[]>
     * @memberof Comments
     */
    searchByCommentCreatorID(userID: number | string, page?: number, order?: string): Promise<e621CommentJSON[]>;
    /** Search for comments by a single user's name
     * @param {string} userName name of the user to search
     * @param {number} [page] Page number to return
     * @param {string} [order] Sorts the results. Can be one of the following: `date`, `date_asc`, `score`, `score_asc`
     * @returns Promise<e621CommentJSON[]>
     * @memberof Comments
     */
    searchByCommentCreatorName(userName: string, page?: number, order?: string): Promise<e621CommentJSON[]>;
    /** Get ALL recent comments visible on e621
     * @param {number} [page] Page number to return
     * @returns Promise<e621CommentJSON[]>
     * @memberof Comments
     */
    getRecentComments(page?: number): Promise<e621CommentJSON[]>;
    /** Create a comment for a post given the ID and comment text
     * @param {(number | string)} postID ID of the post to which you are responding
     * @param {string} commentText The body of the comment
     * @param {boolean} [anonymous] Set to `true` if you want to post this comment anonymously
     * @returns Promise<e621POSTResponse>
     * @memberof Comments
     */
    create(postID: number | string, commentText: string, anonymous?: boolean): Promise<e621POSTResponse>;
    /** Update a comment's body by ID
     * @param {(number | string)} commentID ID of the comment to update
     * @param {string} commentTextUpdate New text for the given comment
     * @returns Promise<e621POSTResponse>
     * @memberof Comments
     */
    update(commentID: number | string, commentTextUpdate: string): Promise<e621POSTResponse>;
    /** Delete a comment by ID
     * @param {(number | string)} commentID ID of the comment to delete
     * @returns Promise<e621POSTResponse>
     * @memberof Comments
     */
    destroy(commentID: number | string): Promise<e621POSTResponse>;
}
