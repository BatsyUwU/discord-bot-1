"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Tags = /** @class */ (function () {
    function Tags(pageLimit, requestServices) {
        this.pageLimit = pageLimit;
        this.requestServices = requestServices;
    }
    /** Get a tag's data by name
     * @param {string} tagName
     * @returns Promise<e621TagJSON[]>
     * @memberof Tags
     */
    Tags.prototype.getByName = function (tagName) {
        var url = "https://e621.net/tag/index.json?name=" + tagName;
        return this.requestServices.get(url)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Get a set of related tags by providing a valid tag
     * @param {string} tagName The tag to get related results for
     * @returns Promise<e621RelatedTagJSON[]>
     * @memberof Tags
     */
    Tags.prototype.getRelatedTagsByName = function (tagName) {
        var url = "https://e621.net/tag/related.json?tags=" + tagName;
        return this.requestServices.get(url)
            .then(function (response) {
            // We are going to have to modify this a bit before giving it to the user
            var key = Object.keys(response)[0];
            var data = response[key];
            // make the array 1D, and have JSON inside the array entries, not CSV
            var formattedData = data.map(function (entry) {
                return new Object({
                    name: entry[0],
                    popularity: entry[1],
                    type: entry[2]
                });
            });
            return formattedData;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** This is a more advanced `getByName` method, allowing you to get more tag data than just by name
     * @param {number} [limit] Hard limit of 500
     * @param {number} [page] Page number to return
     * @param {string} [order] Order of the tags, can be `date`, `count` or `name`
     * @param {string} [name] Name of the tag
     * @returns Promise<e621TagJSON[]>
     * @memberof Tags
     */
    Tags.prototype.listAllTags = function (limit, page, order, tagName, tagPattern, afterID) {
        var url;
        // consturct the URL (in a mega janky way)
        if (!limit)
            limit = 50;
        if (!page)
            page = 1;
        url = "https://e621.net/tag/index.json?limit=" + limit + "&page=" + page;
        if (order)
            url = url + ("&order=" + order);
        if (tagName)
            url = url + ("&name=" + tagName);
        if (tagPattern)
            url = url + ("&name_pattern=" + tagPattern);
        if (afterID)
            url = url + ("&after_id=" + afterID);
        return this.requestServices.get(url)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Get a tag's data by ID
     * @param {(number | string)} tagID ID of the tag to return
     * @returns Promise<e621TagJSON>
     * @memberof Tags
     */
    Tags.prototype.getByID = function (tagID) {
        return this.requestServices.get("https://e621.net/tag/show.json?id=" + tagID)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Update a tag's type
     * @param {string} name Name of the tag to update
     * @param {e621TagTypes} tagType New type for the tag
     * @returns Promise<e621TagUpdateResponse>
     * @memberof Tags
     */
    Tags.prototype.updateTag = function (name, tagType) {
        var url = "https://e621.net/tag/update.json";
        var postObj = {
            "tag[name]": name,
            "tag[tag_type]": tagType
        };
        return this.requestServices.post(url, postObj)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Get a tag's aliases (user and forum_post queries NOT supported)
     * @param {string} query The tag to query
     * @param {number} [page] Page number to return
     * @param {string} [order] How to order the results. Can be `tag`, `aliasedtag`,` reason`, `user`, `date`, or `forum_post`
     * @param {boolean} [approved] Can be all, true, false.
     * @returns Promise<e621TagAliases[]>
     * @memberof Tags
     */
    Tags.prototype.getAliases = function (query, page, order, approved) {
        var url;
        if (!page)
            page = 1;
        url = "https://e621.net/tag_alias/index.json?page=" + page + "&query=" + query;
        if (order)
            url = url + ("&order=" + order);
        if (approved)
            url = url + ("&approved=" + approved);
        return this.requestServices.get(url)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    return Tags;
}());
exports.default = Tags;
