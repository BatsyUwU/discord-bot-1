import { e621PostData, e621MD5CheckJSON, e621FavoritedUsers, e621PostTagHistory, e621POSTResponse } from '../interfaces';
import { RequestServices } from '../RequestService';
import { e621PopularityStrings } from '../enums';
export default class Posts {
    private pageLimit;
    private requestServices;
    constructor(pageLimit: number, requestServices: RequestServices);
    /**Check if a post exists by MD5 hash string
     * @param {string} md5String
     * @memberof e621
     */
    checkIfExists(md5String: string): Promise<e621MD5CheckJSON>;
    /** Navigate through deleted posts, delreason being populated.
     * @param {number} [page] Page number to return (if more than 1)
     * @param {(number | string)} [userID] Return posts uploaded by the user with the given ID number.
     * @memberof e621
     */
    getDeletedIndex(page?: number, userID?: number | string): Promise<e621PostData[]>;
    /** Revert a post with the given `postID` to a previous tag history
     * @param {number} postID ID of the post to revert the tags for
     * @param {number} tagHistoryID ID of the tag history set, can be retrieved by using `posts.getTagHistoryByID` method
     * @returns Promise<e621POSTResponse>
     * @memberof Posts
     */
    revertTags(postID: number, tagHistoryID: number): Promise<e621POSTResponse>;
    /** Vote for a post by ID, Score must be 1 for updvote, -1 for downvote
     * @param {(string | number)} postID
     * @param {(1 | -1)} score
     * @returns Promise<any>
     * @memberof Posts
     */
    vote(postID: string | number, score: 1 | -1): Promise<any>;
    /** Generate a post's URL by its ID
     * @param {(string | number)} postID ID of the e621 post (Can be pulled from the API)
     * @returns string
     * @memberof Posts
     */
    generatePostUrl(postID: string | number): string;
    /** Get popular posts for a given timeframe by providing a *e621PopularityStrings* typeArg
     * @param {e621PopularityStrings} typeArg Type of popular endpoint to use
     * @returns Promise<e621PostData[]>
     * @memberof e621
     */
    getPopularPosts(typeArg: e621PopularityStrings): Promise<e621PostData[]>;
    /** Get a post's data by its ID
     * @param {number} postID ID of the e621 post
     */
    getByID(postID: string): Promise<e621PostData[]>;
    /** Get a post's data by its MD5 hash string
     * @param {stirng} md5String
     */
    getByMD5(md5String: string): Promise<e621PostData[]>;
    /** Get a set of e621 posts filtered by tags via pagination
     * @param {string} tags The tags to filter results by - providing an empty string or NULL value will get RECENT posts
     * @param {number} start Page number to start at
     * @param {number} limitPerPage Number of results per page (Max of 75)
     * @param {number} pageLimit Number of pages to get (Max of 750)
     * @memberof e621
     */
    getIndexPaginate(tags?: string, start?: number, limitPerPage?: number, pageLimit?: number): Promise<Array<Array<e621PostData>>>;
    /**
     * Get a post's tag history XML. Pass true for returnJSON to get converted JSON back from the Promise
     * @param {(string | number)} postID The post's ID to get the tag history of
     * @param {boolean} [returnJSON] Pass true to have XML converted to JSON before return
     * @returns Promise<any>
     * @memberof Posts
     */
    getTagHistoryByID(postID: string | number, returnJSON?: boolean): Promise<e621PostTagHistory[]>;
    /** Get a list of users who have favorited a given post by `postID`
     * @param {(string | number)} postID ID of the post to get favorites for
     * @returns Promise<e621FavoritedUsers>
     * @memberof Posts
     */
    getFavorites(postID: string | number): Promise<e621FavoritedUsers>;
}
