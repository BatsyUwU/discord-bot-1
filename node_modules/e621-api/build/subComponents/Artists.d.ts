import { RequestServices } from '../RequestService';
import { e621ArtistInfo, e621ArtistPOSTJSON, e621POSTResponse } from '../interfaces';
export default class Artists {
    private pageLimit;
    private requestServices;
    constructor(pageLimit: number, requestServices: RequestServices);
    /** List artists by name and or/order through the e621 API
     * @param {string} [name] Name The name (or a fragment of the name) of the artist or the artist URL
     * @param {number} [limit] Limit How many records per page
     * @param {string} [order] Order, Can be `date` or `name`
     * @param {number} [page] Page number to return
     * @returns Promise<e621ArtistInfo[]>
     * @memberof Artists
     */
    listArtists(name?: string, limit?: number, order?: string, page?: number): Promise<e621ArtistInfo[]>;
    /** Create an Artist
     * @param {string} name Name of the artist
     * @param {string} artistURLs A list of URLs associated with the artist, whitespace delimited
     * @param {string} [groupName] The name of the group or circle that this artist is a member of
     * @param {string} [otherNames] List of comma separated names this artist is also known by
     * @returns Promise<e621ArtistPOSTJSON>
     * @memberof Artists
     */
    create(name: string, artistURLs: string, groupName?: string, otherNames?: string): Promise<e621ArtistPOSTJSON>;
    /** Update an artists info, only the artistID is required
     * @param {(number | string)} artistID ID of the artist to update
     * @param {string} [name] Name of the artist
     * @param {string} [artistURLs] A list of URLs associated with the artist, whitespace delimited
     * @param {boolean} [isActive] If the Artist is active (true or false)
     * @param {string} [groupName] The name of the group or circle that this artist is a member of
     * @param {string} [otherNames] List of comma separated names this artist is also known by
     * @returns Promise<e621ArtistPOSTJSON>
     * @memberof Artists
     */
    update(artistID: number | string, name?: string, artistURLs?: string, isActive?: boolean, groupName?: string, otherNames?: string): Promise<e621ArtistPOSTJSON>;
    /** DELETE an artist, you must be logged in to perform this action and have sufficient privaleges
     * @param {(number | string)} artistID ID of the artist to delete
     * @returns Promise<e621POSTResponse>
     * @memberof Artists
     */
    delete(artistID: number | string): Promise<e621POSTResponse>;
}
