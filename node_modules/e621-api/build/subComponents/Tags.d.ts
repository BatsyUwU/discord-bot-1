import { e621TagJSON, e621TagAliases, e621TagUpdateResponse, e621RelatedTagJSON } from '../interfaces';
import { e621TagTypes } from '../enums';
import { RequestServices } from '../RequestService';
export default class Tags {
    private pageLimit;
    private requestServices;
    constructor(pageLimit: number, requestServices: RequestServices);
    /** Get a tag's data by name
     * @param {string} tagName
     * @returns Promise<e621TagJSON[]>
     * @memberof Tags
     */
    getByName(tagName: string): Promise<e621TagJSON[]>;
    /** Get a set of related tags by providing a valid tag
     * @param {string} tagName The tag to get related results for
     * @returns Promise<e621RelatedTagJSON[]>
     * @memberof Tags
     */
    getRelatedTagsByName(tagName: string): Promise<e621RelatedTagJSON[]>;
    /** This is a more advanced `getByName` method, allowing you to get more tag data than just by name
     * @param {number} [limit] Hard limit of 500
     * @param {number} [page] Page number to return
     * @param {string} [order] Order of the tags, can be `date`, `count` or `name`
     * @param {string} [name] Name of the tag
     * @returns Promise<e621TagJSON[]>
     * @memberof Tags
     */
    listAllTags(limit?: number, page?: number, order?: string, tagName?: string, tagPattern?: string, afterID?: number): Promise<e621TagJSON[]>;
    /** Get a tag's data by ID
     * @param {(number | string)} tagID ID of the tag to return
     * @returns Promise<e621TagJSON>
     * @memberof Tags
     */
    getByID(tagID: number | string): Promise<e621TagJSON>;
    /** Update a tag's type
     * @param {string} name Name of the tag to update
     * @param {e621TagTypes} tagType New type for the tag
     * @returns Promise<e621TagUpdateResponse>
     * @memberof Tags
     */
    updateTag(name: string, tagType: e621TagTypes): Promise<e621TagUpdateResponse>;
    /** Get a tag's aliases (user and forum_post queries NOT supported)
     * @param {string} query The tag to query
     * @param {number} [page] Page number to return
     * @param {string} [order] How to order the results. Can be `tag`, `aliasedtag`,` reason`, `user`, `date`, or `forum_post`
     * @param {boolean} [approved] Can be all, true, false.
     * @returns Promise<e621TagAliases[]>
     * @memberof Tags
     */
    getAliases(query: string, page?: number, order?: string, approved?: boolean): Promise<e621TagAliases[]>;
}
