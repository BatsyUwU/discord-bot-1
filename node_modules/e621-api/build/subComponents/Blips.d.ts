import { RequestServices } from '../RequestService';
import { e621POSTResponse, e621BlipInfo } from '../interfaces';
export default class Blips {
    private pageLimit;
    private requestServices;
    constructor(pageLimit: number, requestServices: RequestServices);
    /** Create a blip, either in response to another blip or standalone
     * @param {string} bodyText Text of the blip's body to create
     * @param {(number | string)} [responseID] ID of another blip to respond to
     * @returns Promise<e621POSTResponse>
     * @memberof Blips
     */
    create(bodyText: string, responseID?: number | string): Promise<e621POSTResponse>;
    /** Update a blip's body by ID
     * @param {(number | string)} blipID ID of the blip to update
     * @param {string} bodyText New text of the blip body
     * @returns Promise<e621POSTResponse>
     * @memberof Blips
     */
    update(blipID: number | string, bodyText: string): Promise<e621POSTResponse>;
    /** Get a set of recent blips
     * @param {number} [page] Page number to return
     * @returns Promise<e621BlipInfo[]>
     * @memberof Blips
     */
    getRecentBlips(page?: number): Promise<e621BlipInfo[]>;
    /** Get a blip's information by ID, returns a single blip
     * @param {(number | string)} blipID ID of the blip to retrieve
     * @returns Promise<e621BlipInfo>
     * @memberof Blips
     */
    getBlipByID(blipID: number | string): Promise<e621BlipInfo>;
    /** Get a blip's responses (if any). If an error is thrown, then their are no responses for the first (or given) page
     * @param {(number | string)} blipID ID for the blip to retrieve the responses of
     * @param {number} [page] Page number to return
     * @returns Promise<e621BlipInfo[]>
     * @memberof Blips
     */
    getBlipResponses(blipID: number | string, page?: number): Promise<e621BlipInfo[]>;
    /** Search for a blip that contains a given `textToMatch` string
     * @param {string} textToMatch String to search for matching blips
     * @param {number} [page] Page number to return
     * @returns Promise<e621BlipInfo[]>
     * @memberof Blips
     */
    getBlipByText(textToMatch: string, page?: number): Promise<e621BlipInfo[]>;
}
