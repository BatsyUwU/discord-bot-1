"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Artists = /** @class */ (function () {
    function Artists(pageLimit, requestServices) {
        this.pageLimit = pageLimit;
        this.requestServices = requestServices;
    }
    /** List artists by name and or/order through the e621 API
     * @param {string} [name] Name The name (or a fragment of the name) of the artist or the artist URL
     * @param {number} [limit] Limit How many records per page
     * @param {string} [order] Order, Can be `date` or `name`
     * @param {number} [page] Page number to return
     * @returns Promise<e621ArtistInfo[]>
     * @memberof Artists
     */
    Artists.prototype.listArtists = function (name, limit, order, page) {
        var url = "https://e621.net/artist/index.json?";
        if (name)
            url = "https://e621.net/artist/index.json?name=" + name;
        if (limit)
            url = url + ("&limit=" + limit);
        if (order)
            url = url + ("&order=" + order);
        if (page)
            url = url + ("&page=" + page);
        return this.requestServices.get(url)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Create an Artist
     * @param {string} name Name of the artist
     * @param {string} artistURLs A list of URLs associated with the artist, whitespace delimited
     * @param {string} [groupName] The name of the group or circle that this artist is a member of
     * @param {string} [otherNames] List of comma separated names this artist is also known by
     * @returns Promise<e621ArtistPOSTJSON>
     * @memberof Artists
     */
    Artists.prototype.create = function (name, artistURLs, groupName, otherNames) {
        var url = "https://e621.net/artist/create.json";
        var postObj = {
            "artist[name]": name,
            "artist[urls]": artistURLs
        };
        if (groupName)
            postObj["artist[groups]"] = groupName;
        if (otherNames)
            postObj["artist[other_names]"] = otherNames;
        return this.requestServices.post(url, postObj)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Update an artists info, only the artistID is required
     * @param {(number | string)} artistID ID of the artist to update
     * @param {string} [name] Name of the artist
     * @param {string} [artistURLs] A list of URLs associated with the artist, whitespace delimited
     * @param {boolean} [isActive] If the Artist is active (true or false)
     * @param {string} [groupName] The name of the group or circle that this artist is a member of
     * @param {string} [otherNames] List of comma separated names this artist is also known by
     * @returns Promise<e621ArtistPOSTJSON>
     * @memberof Artists
     */
    Artists.prototype.update = function (artistID, name, artistURLs, isActive, groupName, otherNames) {
        var url = "https://e621.net/artist/update.json";
        var postObj = {
            id: artistID
        };
        if (name)
            postObj["artist[name]"] = name;
        if (artistURLs)
            postObj["artist[urls]"] = artistURLs;
        if (groupName)
            postObj["artist[groups]"] = groupName;
        if (otherNames)
            postObj["artist[other_names]"] = otherNames;
        if (isActive !== null)
            postObj["artist[is_active]"] = isActive;
        return this.requestServices.post(url, postObj)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** DELETE an artist, you must be logged in to perform this action and have sufficient privaleges
     * @param {(number | string)} artistID ID of the artist to delete
     * @returns Promise<e621POSTResponse>
     * @memberof Artists
     */
    Artists.prototype.delete = function (artistID) {
        var url = "https://e621.net/artist/destroy.json";
        return this.requestServices.post(url, {
            "id": artistID
        })
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    return Artists;
}());
exports.default = Artists;
