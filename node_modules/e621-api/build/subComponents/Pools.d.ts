import { RequestServices } from '../RequestService';
import { e621POSTResponse, e621PoolInfo, e621PoolPostSet } from '../interfaces';
export default class Pools {
    private pageLimit;
    private requestServices;
    constructor(pageLimit: number, requestServices: RequestServices);
    /** List ALL pools by newest first
     * @param {number} [page] The page number to return
     * @returns Promise<e621PoolInfo[]>
     * @memberof Pools
     */
    listPools(page?: number): Promise<e621PoolInfo[]>;
    /** List the posts contained in a pool
     * @param {(number | string)} poolID ID of the pool to list the posts of
     * @param {number} [page] The page number to return
     * @returns Promise<e621PoolPostSet>
     * @memberof Pools
     */
    listPoolPosts(poolID: number | string, page?: number): Promise<e621PoolPostSet>;
    /** Get a pool or set of pools matched by name
     * @param {string} query The text to match to a pool's title
     * @param {number} [page] The page number to return
     * @returns Promise<e621PoolInfo[]>
     * @memberof Pools
     */
    getPoolsByName(query: string, page?: number): Promise<e621PoolInfo[]>;
    /** Create a pool, giving a name and description. You can add posts to the pool using the `pools.addPost` method
     * @param {string} poolName The name of the pool to create
     * @param {string} poolDescription A description of the pool
     * @returns Promise<e621POSTResponse>
     * @memberof Pools
     */
    create(poolName: string, poolDescription: string): Promise<e621POSTResponse>;
    /** Update a pool's name by ID
     * @param {(number | string)} poolID ID of the pool to update
     * @param {string} poolName The updated name for the given `poolID`
     * @returns Promise<e621POSTResponse>
     * @memberof Pools
     */
    updatePoolName(poolID: number | string, poolName: string): Promise<e621POSTResponse>;
    /** Update a pool's description by ID
     * @param {(number | string)} poolID ID of the pool to update
     * @param {string} poolDescription The updated description for the given `poolID`
     * @returns Promise<e621POSTResponse>
     * @memberof Pools
     */
    updatePoolDescription(poolID: number | string, poolDescription: string): Promise<e621POSTResponse>;
    /** Delete a pool by its ID
     *
     * You must either own the pool or be a moderator (or above) to delete a pool
     * @param {(number | string)} poolID ID of the pool to delete
     * @returns Promise<e621POSTResponse>
     * @memberof Pools
     */
    destroy(poolID: number | string): Promise<e621POSTResponse>;
    /** Add a post from a pool by the pool and post ID
     * @param {number} poolID ID of the pool to add to
     * @param {number} postID ID of the post to add
     * @returns Promise<e621POSTResponse>
     * @memberof Pools
     */
    addPost(poolID: number, postID: number): Promise<e621POSTResponse>;
    /** Remove a post from a pool by the pool and post ID
     * @param {number} poolID ID to the pool to remove the post from
     * @param {number} postID ID of the post to remove
     * @returns Promise<e621POSTResponse>
     * @memberof Pools
     */
    removePost(poolID: number, postID: number): Promise<e621POSTResponse>;
}
