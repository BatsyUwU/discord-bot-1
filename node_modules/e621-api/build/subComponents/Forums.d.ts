import { RequestServices } from '../RequestService';
import { e621POSTResponse, e621ForumPost } from '../interfaces';
import { e621ForumPostReasons } from '../enums';
export default class Forums {
    private pageLimit;
    private requestServices;
    constructor(pageLimit: number, requestServices: RequestServices);
    /** Create a forum post
     * @param {string} postTitle Title of the forum post to create
     * @param {string} postBody Body of the forum post
     * @param {number | null} parentPostID ID of the parent forum post. Can be `null`
     * @param {e621ForumPostReasons} postCategory Category of the forum post
     * @returns Promise<e621POSTResponse>
     * @memberof Forums
     */
    createPost(postTitle: string, postBody: string, parentPostID: number | null, postCategory: e621ForumPostReasons): Promise<e621POSTResponse>;
    /** Update a forum post's body
     * @param {number} postID ID of the forum post to update
     * @param {string} newBody New Body of the forum post
     * @returns Promise<e621POSTResponse>
     * @memberof Forums
     */
    updatePostBody(postID: number, newBody: string): Promise<e621POSTResponse>;
    /** Update a forum post's title
     * @param {number} postID ID of the forum post to update
     * @param {string} newTitle New title of the forum post
     * @returns Promise<e621POSTResponse>
     * @memberof Forums
     */
    updatePostTitle(postID: number, newTitle: string): Promise<e621POSTResponse>;
    /** Update a forum post's topic category
     * @param {number} postID ID of the forum post to update
     * @param {string} newTopic New topic of the forum post
     * @returns Promise<e621POSTResponse>
     * @memberof Forums
     */
    updatePostCategory(postID: number, newTopic: e621ForumPostReasons): Promise<e621POSTResponse>;
    /** List all forum parent posts
     * @param {number} [page] Page number to return
     * @returns Promise<e621ForumPost[]>
     * @memberof Forums
     */
    getAllPosts(page?: number): Promise<e621ForumPost[]>;
    /** List all posts that have the given `parentID`
     * @param {(number | string )} parentID ID of the parent's post to get the children of
     * @param {string} [page] Page number to return
     * @returns Promise<e621ForumPost[]>
     * @memberof Forums
     */
    getPostsByParentID(parentID: number | string, page?: string): Promise<e621ForumPost[]>;
    /** Search for a forum post that matches the given `query` string
     * @param {string} query String to match forum posts for
     * @param {number} [page] Page number to return
     * @returns e621ForumPost[]
     * @memberof Forums
     */
    searchPosts(query: string, page?: number): Promise<e621ForumPost[]>;
    /** Get a forum post's data by its `forumPostID`
     * @param {number} forumPostID ID of the forum post to retrieve
     * @returns Promise<e621ForumPost>
     * @memberof Forums
     */
    getPostByID(forumPostID: number): Promise<e621ForumPost>;
}
