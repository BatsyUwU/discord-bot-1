"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Comments = /** @class */ (function () {
    function Comments(pageLimit, requestServices) {
        this.pageLimit = pageLimit;
        this.requestServices = requestServices;
    }
    /** Get a single comment's data by ID
     * @param {(number | string)} commentID ID of the comment to retrieve
     * @returns Promise<e621CommentJSON>
     * @memberof Comments
     */
    Comments.prototype.show = function (commentID) {
        var url = "https://e621.net/comment/show.json?id=" + commentID;
        return this.requestServices.get(url)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** List a set of comments by a post's ID
     * @param {(number | string)} postID The ID number of the post to retrieve comments for
     * @param {number} [page] Page number to return
     * @param {string} [commentStatus] Returns hidden comments when set to `hidden`, visible comments when set to `active`, or both when set to `any`. Note that whether or not you can see other user's hidden comments is affected by your permission levels
     * @returns Promise<e621CommentJSON[]>
     * @memberof Comments
     */
    Comments.prototype.list = function (postID, page, commentStatus) {
        var url = "https://e621.net/comment/index.json?";
        if (postID)
            url += "&post_id=" + postID;
        if (page)
            url += "&page=" + page;
        if (commentStatus)
            url += "&status=" + commentStatus;
        return this.requestServices.get(url)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Search for comments matching the given `query` text
     * @param {string} query String query which contains the given text for the comment body
     * @param {boolean} [fuzzy] If set to true, fuzzy logic for the query will be used, otherwise it's exact matched
     * @param {boolean} [page] Page number to return
     * @param {string} [order] Sorts the results. Can be one of the following: `date`, `date_asc`, `score`, `score_asc`
     * @returns Promise<e621CommentJSON[]>
     * @memberof Comments
     */
    Comments.prototype.searchByCommentText = function (query, fuzzy, page, order) {
        var url = "https://e621.net/comment/search.json?query=" + query;
        if (fuzzy)
            url += "&results=fuzzy";
        else
            url += "&results=exact";
        if (order)
            url += "&order=" + order;
        if (page)
            url += "&page=" + page;
        return this.requestServices.get(url)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Search for comments by a single user's ID
     * @param {(number | string)} userID ID of the user to search comments for
     * @param {number} [page] Page number to return
     * @param {string} [order] Sorts the results. Can be one of the following: `date`, `date_asc`, `score`, `score_asc`
     * @returns Promise<e621CommentJSON[]>
     * @memberof Comments
     */
    Comments.prototype.searchByCommentCreatorID = function (userID, page, order) {
        var url = "https://e621.net/comment/search.json?user_id=" + userID;
        if (order)
            url += "&order=" + order;
        if (page)
            url += "&page=" + page;
        return this.requestServices.get(url)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Search for comments by a single user's name
     * @param {string} userName name of the user to search
     * @param {number} [page] Page number to return
     * @param {string} [order] Sorts the results. Can be one of the following: `date`, `date_asc`, `score`, `score_asc`
     * @returns Promise<e621CommentJSON[]>
     * @memberof Comments
     */
    Comments.prototype.searchByCommentCreatorName = function (userName, page, order) {
        var url = "https://e621.net/comment/search.json?user=" + userName;
        if (order)
            url += "&order=" + order;
        if (page)
            url += "&page=" + page;
        return this.requestServices.get(url)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Get ALL recent comments visible on e621
     * @param {number} [page] Page number to return
     * @returns Promise<e621CommentJSON[]>
     * @memberof Comments
     */
    Comments.prototype.getRecentComments = function (page) {
        var url = "https://e621.net/comment/search.json?";
        if (page)
            url += "&page=" + page;
        return this.requestServices.get(url)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Create a comment for a post given the ID and comment text
     * @param {(number | string)} postID ID of the post to which you are responding
     * @param {string} commentText The body of the comment
     * @param {boolean} [anonymous] Set to `true` if you want to post this comment anonymously
     * @returns Promise<e621POSTResponse>
     * @memberof Comments
     */
    Comments.prototype.create = function (postID, commentText, anonymous) {
        var url = "https://e621.net/comment/create.json";
        var postObj = {
            "comment[body]": commentText,
            "comment[post_id": postID
        };
        if (anonymous)
            postObj["comment[anonymous]"] = 1;
        return this.requestServices.post(url, postObj)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Update a comment's body by ID
     * @param {(number | string)} commentID ID of the comment to update
     * @param {string} commentTextUpdate New text for the given comment
     * @returns Promise<e621POSTResponse>
     * @memberof Comments
     */
    Comments.prototype.update = function (commentID, commentTextUpdate) {
        var url = "https://e621.net/comment/update.json";
        var postObj = {
            "id": commentID,
            "comment[body]": commentTextUpdate,
        };
        return this.requestServices.post(url, postObj)
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    /** Delete a comment by ID
     * @param {(number | string)} commentID ID of the comment to delete
     * @returns Promise<e621POSTResponse>
     * @memberof Comments
     */
    Comments.prototype.destroy = function (commentID) {
        var url = "https://e621.net/comment/destroy.json";
        return this.requestServices.post(url, {
            "id": commentID
        })
            .then(function (response) {
            return response;
        })
            .catch(function (err) {
            throw Error(err);
        });
    };
    return Comments;
}());
exports.default = Comments;
