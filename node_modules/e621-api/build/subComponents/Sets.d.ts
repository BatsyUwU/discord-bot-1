import { RequestServices } from '../RequestService';
import { e621POSTResponse, e621SetJSONConverted, e621SetJSONConvertedWithPosts } from '../interfaces';
export default class Sets {
    private pageLimit;
    private requestServices;
    constructor(pageLimit: number, requestServices: RequestServices);
    /** List most recent sets, limit of 50 per page
     *
     * **PLEASE NOTE**: This is being converted from XML as the JSON endpoint is 30x slower than the
     * XML endpoint, so it's faster to convert them. There may also be minor bugs even when custom converting
     * @param {number} [page] Page number to return
     * @returns An array of set data (without post info, use `showSet()` method to retrive the post info)
     * @memberof Sets
     */
    getAllSets(page?: number): Promise<e621SetJSONConverted[]>;
    /** Get sets that include the given post's ID
     *
     * **PLEASE NOTE**: This is being converted from XML as the JSON endpoint is 30x slower than the
     * XML endpoint, so it's faster to convert them. There may also be minor bugs even when custom converting
     * @param {number} postID Post to filter sets by
     * @param {number} [page] The page number to return, if there is only one page this is ignored
     * @returns An array of set data (without post info, use `showSet()` method to retrive the post info)
     * @memberof Sets
     */
    getSetsByPostID(postID: number, page?: number): Promise<e621SetJSONConverted[]>;
    /** Get sets created by the given user's ID
     *
     * **PLEASE NOTE**: This is being converted from XML as the JSON endpoint is 30x slower than the
     * XML endpoint, so it's faster to convert them. There may also be minor bugs even when custom converting
     * @param {number} userID User ID to filter sets by
     * @param {number} [page] The page number to return, if there is only one page this is ignored
     * @returns An array of set data (without post info, use `showSet()` method to retrive the post info)
     * @memberof Sets
     */
    getSetsByUserID(userID: number, page?: number): Promise<e621SetJSONConverted[]>;
    /** Get a set by its `setID`
     *
     * **PLEASE NOTE**: This is being converted from XML as the JSON endpoint is 30x slower than the
     * XML endpoint, so it's faster to convert them. There may also be minor bugs even when custom converting
     * @param {(number | string)} setID ID of the set to convert and retrieve
     * @returns Promise<e621SetJSONConvertedWithPosts> - a single converted XML set
     * @memberof Sets
     */
    showSet(setID: number | string): Promise<e621SetJSONConvertedWithPosts>;
    /** Cretae a new empty set
     * @param {string} setName Name of the set to create
     * @param {string} shortName SHort named of the set
     * @param {string} setDescription Description for the set
     * @param {boolean} isPublic If the set will be public
     * @param {boolean} transferOnDelete Whether to replace deleted posts with their parents
     * @returns Promise<e621POSTResponse>
     * @memberof Sets
     */
    create(setName: string, shortName: string, setDescription: string, isPublic: boolean, transferOnDelete: boolean): Promise<e621POSTResponse>;
    /** Update a set's name by ID
     * @param {(number | string)} setID ID of the set to update
     * @param {string} newName New name of the set
     * @returns Promise<e621POSTResponse>
     * @memberof Sets
     */
    updateName(setID: number | string, newName: string): Promise<e621POSTResponse>;
    /** Update a set's shortname by ID
     * @param {(number | string)} setID ID of the set to update
     * @param {string} newShortName New shortname of the set
     * @returns Promise<e621POSTResponse>
     * @memberof Sets
     */
    updateShortName(setID: number | string, newShortName: string): Promise<e621POSTResponse>;
    /** Update a set's description by its ID
     * @param {(number | string)} setID ID of the set to update
     * @param {string} newDescription New description of the set
     * @returns Promise<e621POSTResponse>
     * @memberof Sets
     */
    updateDescription(setID: number | string, newDescription: string): Promise<e621POSTResponse>;
    /** Update a set's public status by its `setID`
     * @param {(number | string)} setID ID of the set to update
     * @param {string} isPublic Public status of the set
     * @returns Promise<e621POSTResponse>
     * @memberof Sets
     */
    updatePublicStatus(setID: number | string, isPublic: boolean): Promise<e621POSTResponse>;
    /** Update a set's transferOnDelete status by its `setID`
     * @param {(number | string)} setID ID of the set to update
     * @param {string} transferOnDelete Public status of the set
     * @returns Promise<e621POSTResponse>
     * @memberof Sets
     */
    updateTransferOnDeleteStatus(setID: number | string, transferOnDelete: boolean): Promise<e621POSTResponse>;
    /** Add a post to a set
     * @param {(number | string)} setID ID of the set to add the post to
     * @param {number} postID ID of the post to add to the set
     * @returns Promise<e621POSTResponse>
     * @memberof Sets
     */
    addPost(setID: number | string, postID: number): Promise<e621POSTResponse>;
    /** Remove a post from a set
     * @param {(number | string)} setID ID of the set to remove the post from
     * @param {number} postID ID of the post to remove from the set
     * @returns Promise<e621POSTResponse>
     * @memberof Sets
     */
    removePost(setID: number | string, postID: number): Promise<e621POSTResponse>;
    /** Delete a set (If you have proper permissions)
     * @param {(number | string)} setID ID of the set to deleteF
     * @returns Promise<e621POSTResponse>
     * @memberof Sets
     */
    destroy(setID: number | string): Promise<e621POSTResponse>;
    private beautifySetJSONArray;
    private beautifySetJSONSingle;
}
