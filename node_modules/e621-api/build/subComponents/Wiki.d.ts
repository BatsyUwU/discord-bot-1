import { RequestServices } from '../RequestService';
import { e621POSTResponse, e621WikiEntry } from '../interfaces';
export default class Wiki {
    private pageLimit;
    private requestServices;
    constructor(pageLimit: number, requestServices: RequestServices);
    /** List ALL wiki pages, sorted by name
     *
     * **NOTE**: The official docs on the list endpoint where it says that queries are accepted is **false**,
     * none of the params besides `page` are processed.
     * @param {number} [page] Page number to return
     * @returns Promise<e621WikiEntry[]>
     * @memberof Wiki
     */
    list(page?: number): Promise<e621WikiEntry[]>;
    /** Create a wiki page with the given title and body
     * @param {string} title Title of the wiki page to create
     * @param {string} body Body of the wiki page to create
     * @returns Promise<e621POSTResponse>
     * @memberof Wiki
     */
    create(title: string, body: string): Promise<e621POSTResponse>;
    /** Update a wiki page by title to have a new title
     *
     * Potential error reasons: "Page is locked"
     * @param {string} currentTitle Wiki page's current title (wiki endpoint does not support updates by ID)
     * @param {string} newTitle New Title
     * @returns Promise<e621POSTResponse>
     * @memberof Wiki
     */
    updateWikiTitle(currentTitle: string, newTitle: string): Promise<e621POSTResponse>;
    /** Update a wiki page with the given title to have a new body
     *
     * Potential error reasons: "Page is locked"
     * @param {string} wikiTitle Wiki page's current title (wiki endpoint does not support updates by ID)
     * @param {string} newBody New Body to update the wiki page with
     * @returns Promise<e621POSTResponse>
     * @memberof Wiki
     */
    updateWikiBody(wikiTitle: string, newBody: string): Promise<e621POSTResponse>;
    /** Get a wiki page data by title
     * @param {string} wikiTitle Title of the wiki page to get
     * @returns Promise<e621WikiEntry>
     * @memberof Wiki
     */
    getWikiByTitle(wikiTitle: string): Promise<e621WikiEntry>;
    /** Delete a wiki page by title
     *
     * **NOTE**: You must be logged in as a moderator or higher to delete a wiki page
     * @param {string} wikiTitle Title of the wiki page to delete
     * @memberof Wiki
     */
    destroy(wikiTitle: string): Promise<e621POSTResponse>;
    /** Revert a wiki page with the given title to the given version
     * @param {string} wikiTitle Title of the wiki page to revert
     * @param {number} version Version to revert the page to
     * @returns Promise<e621POSTResponse>
     * @memberof Wiki
     */
    revertWiki(wikiTitle: string, version: number): Promise<e621POSTResponse>;
    /** Get recent changes to wiki pages
     * @param {number} [page] Page number to return
     * @returns Promise<e621WikiEntry[]>
     * @memberof Wiki
     */
    getRecentChanges(page?: number): Promise<e621WikiEntry[]>;
    /** Unlock a wiki page by title
     *
     * **NOTE**: You must be logged in as a moderator or higher to unlock a wiki page
     * @param {string} wikiTitle Title of the wiki page to unlock
     * @memberof Wiki
     */
    unlockWiki(wikiTitle: string): Promise<e621POSTResponse>;
    /** Lock a wiki page by its title
     *
     * **NOTE**: You must be logged in as a moderator or higher to lock a wiki page
     * @param {string} wikiTitle Title of the wiki page to lock
     * @memberof Wiki
     */
    lockWiki(wikiTitle: string): Promise<e621POSTResponse>;
}
