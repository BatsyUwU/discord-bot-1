import { RequestServices } from '../RequestService';
import { e621POSTResponse, e621PostNote } from '../interfaces';
export default class Notes {
    private pageLimit;
    private requestServices;
    constructor(pageLimit: number, requestServices: RequestServices);
    /** Get a post's Notes by the ID of the post
     * @param {(number | string)} postID ID of the post to retrieve notes for
     * @returns Promise<e621PostNote[]>
     * @memberof Notes
     */
    getPostNotes(postID: number | string): Promise<e621PostNote[]>;
    /** Search ALL notes that match a given query
     * @param {string} query String to search all notes for
     * @returns Promise<e621PostNote[]>
     * @memberof Notes
     */
    searchNotes(query: string): Promise<e621PostNote[]>;
    /** Get the history of a note by its ID
     * @param {(number | string)} noteID ID of the note to get the history of
     * @returns Promise<e621PostNote[]>
     * @memberof Notes
     */
    getNoteHistory(noteID: number | string): Promise<e621PostNote[]>;
    /** Revert a note to a given previous version by ID
     * @param {(number | string)} noteID ID of the note to revert
     * @param {number} version Version number to revert the note to
     * @returns Promise<e621POSTResponse>
     * @memberof Notes
     */
    revertNote(noteID: number | string, version: number): Promise<e621POSTResponse>;
    /** Update a note's body by ID
     * @param {number} noteID ID of the note to update
     * @param {string} body The new body message
     * @returns Promise<e621POSTResponse>
     * @memberof Notes
     */
    updateNoteBody(noteID: number, body: string): Promise<e621POSTResponse>;
    /** Update a note's location on the assocaited post by  ID
     * @param {(number | string)} noteID ID of the note to update
     * @param {number} x The X position of the note
     * @param {number} y The Y position of the note
     * @returns Promise<e621POSTResponse>
     * @memberof Notes
     */
    updateNoteLocation(noteID: number | string, x: number, y: number): Promise<e621POSTResponse>;
    /** Update a note's width and height by ID
     * @param {(number | string)} noteID ID of the note to update
     * @param {number} width New Width of the note
     * @param {number} height New height of the note
     * @returns Promise<e621POSTResponse>
     * @memberof Notes
     */
    updateNoteWidthAndHeight(noteID: number | string, width: number, height: number): Promise<e621POSTResponse>;
    /** Set a note's visibility boolean by ID
     * @param {(number | string)} noteID ID of the note to update
     * @param {boolean} isVisible True or false
     * @returns Promise<e621POSTResponse>
     * @memberof Notes
     */
    updateNoteVisibility(noteID: number | string, isVisible: boolean): Promise<e621POSTResponse>;
    /** Create a note, given the ID of the post to add the note to
     * @param {(number | string)} postID ID of the post to attach the note to
     * @param {string} body Text body of the note
     * @param {number} x X position of the note
     * @param {number} y Y position of the note
     * @param {number} width Width of the note
     * @param {number} height Height of the note
     * @returns Promise<e621POSTResponse>
     * @memberof Notes
     */
    create(postID: number | string, body: string, x: number, y: number, width: number, height: number): Promise<e621POSTResponse>;
}
