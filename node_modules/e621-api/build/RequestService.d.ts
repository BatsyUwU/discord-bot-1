export declare class RequestServices {
    private userAgent;
    private userName;
    private apiKey;
    constructor(userAgent: string, userName?: string, apiKey?: string);
    /** Request an e621 URL using constant headers (user-agent, etc.)
     * @param {URL} url
     * @returns Promise<any>
     */
    get(url: string): Promise<any>;
    /** POST a `postObject` to the e621 API, authorization keys are automatically pulled from the parent class (if any)
     * @param {string} url
     * @param {*} postObject
     * @returns {Promise<any>}
     * @memberof RequestServices
     */
    post(url: string, postObject: any): Promise<any>;
    /**
     * Request an E621 URL endpoint and recursively get all pages of information up to the limit set
     *
     * Note: Page 0 and 1 are the same results so we start at 1, not 0 (Sorry)
     *
     * Note: For some endpoints the maximum is 750 pages (which should be fine)
     * @param {String} urlWithoutPageNum URL to paginate (no page number)
     * @param {Number} start Starting page number
     * @param {Number} limit Limit on the number of pages to retrieve
     * @param {Array<any>} pageArray For internal use
     * @returns Promise<Array<any>>
     */
    paginateE621Endpoint(urlWithoutPageNum: string, start: number, limit: number, pageArray: Array<any>): Promise<Array<any>>;
}
